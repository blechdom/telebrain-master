<?xml version="1.0"?>
<project default="build">
	
	<path id="yuicompressor.classpath">
        <fileset dir="./ant">
            <include name="*.jar"/>
        </fileset>
    </path>
	
	<target name="yui.minify">
	    <java jar="./ant/yuicompressor-2.4.2.jar" fork="true" output="${output}">
	    	<arg value="${input}"/>
	    	<classpath>
	            <path refid="yuicompressor.classpath"/>
	        </classpath>
	    </java>			
	</target>
	
	<!-- ant-contrib taskdefs -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	    <pathelement location="./ant/ant-contrib-0.6.jar"/>
	  </classpath>
	</taskdef>		


	<!-- main build dir, inside which we have one dir per build number -->
	<property name="build.dir" value="./build"/>		
	<!--  create final version number -->
	<propertyregex property="final.version"
	              input="${version}"
	              regexp="[0-9]+\.[0-9]+\.[0-9]+"
	              select="\0"
	              casesensitive="false" />
	<!-- js input directory -->
	<property name="dir" value="./src/"/>
	<!-- input demo directory -->
	<property name="demo.dir" value="./demo"/>
	<!-- output directory -->
	<property name="output.dir" value="${build.dir}"/>
	<!-- output JS directory -->
	<property name="output.js.dir" value="${build.dir}/js"/>
	<!-- output demo directory -->
	<property name="output.demo.dir" value="${build.dir}/demo"/>
	<!-- output demo js directory -->
	<property name="output.demo.js.dir" value="${build.dir}/demo/js"/>
	<!-- output tests directory -->
	<property name="output.tests.dir" value="${build.dir}/tests"/>

	<target name="checkForVersion">
		<loadproperties srcFile="build.properties"/>
	</target>	

    <!-- creates the output dir, if necessary -->
	<target name="init" depends="checkForVersion">
		<!-- this will fail silently if the dir already exists; that's ok. it's because this is the first build this user has run. -->
		<mkdir dir="${build.dir}"/>	
		<!-- but these should not already exist; we will have bailed before here if that's the case, unless the user 
		specified the '-Dforce=true' argument on the command line -->
		<delete dir="${output.dir}"/>
		<mkdir dir="${output.dir}"/>	
		<mkdir dir="${output.dir}/doc"/>	
		<mkdir dir="${output.js.dir}"/>	
		<mkdir dir="${output.demo.dir}"/>		
		<mkdir dir="${output.tests.dir}"/>				
		<echo/>
		<echo>Building Version         :    ${version} into directory ${output.dir}</echo>			
	</target>
	
	<!-- 
		concats a single library.
		
		expects "library" parameter to be set.
	-->
	<target name="concatLibrary">
		<echo>Concatenating ${library}</echo>
		<concat destfile="${output.js.dir}/${library}.jsPlumb-${final.version}-all.js">
			<filelist dir="${dir}" files="jsPlumb-util.js, jsPlumb-dom-adapter.js, jsPlumb.js,jsPlumb-anchors.js,jsPlumb-endpoint.js,jsPlumb-connection.js,jsPlumb-defaults.js,jsPlumb-connectors-statemachine.js,jsPlumb-connectors-flowchart.js, jsPlumb-renderers-vml.js, jsPlumb-renderers-svg.js, ${library}.jsPlumb.js, ../lib/jsBezier-0.6-min.js"/>
		</concat>		
	</target>    
	
	<!-- minifies a concatenated library -->
	<target name="minLibrary" depends="concatLibrary">
		<echo>Minifying ${library}</echo>
		<antcall target="yui.minify">
			<param name="input" value="${output.js.dir}/${library}.jsPlumb-${final.version}-all.js"/>
			<param name="output" value="${output.js.dir}/${library}.jsPlumb-${final.version}-all-min.js"/>
		</antcall>				
	</target>	
    
	<!-- 
		generates minified and concatenated scripts for supported libraries.
	--> 
	<target name="minAll">		
		<antcall target="minLibrary">
			<param name="library" value="jquery"/>
		</antcall>
		<antcall target="minLibrary">
			<param name="library" value="mootools"/>
		</antcall>
		<antcall target="minLibrary">
			<param name="library" value="yui"/>
		</antcall>      
	</target>

	<!-- replaces JS imports in HTML files with minified versions and with production links to dependencies -->
	<target name="html">
		<echo>Replacing Javascript imports for ${library}</echo>

		<!-- replace JS dependency with the prod version -->
		<replaceregexp>
			<regexp pattern="(&lt;!-- DEP.*&gt;.*\n)(.*\n)*(.*/DEP --&gt;)"/>
			<substitution expression="${dependencies}"/>
			<fileset dir="${output.demo.dir}/${libraryDir}">
				<include name="*.html"/>
			</fileset>
		</replaceregexp>

		<!-- replace all JS with the minified file -->
		<replaceregexp>						
			<regexp pattern="(&lt;!-- JS.*&gt;.*\n)(.*\n)*(.*/JS --&gt;)"/>
			<substitution expression="&lt;script type='text/javascript' src='../js/${library}.jsPlumb-${final.version}-all-min.js'&gt;&lt;/script&gt;"/>
			<fileset dir="${output.demo.dir}/${libraryDir}">
				<include name="*.html"/>
			</fileset>
		</replaceregexp>		
	</target>

	<!-- copies the demos and replaces their JS imports with final versions -->
	<target name="demo">
		<!-- copy a jsplumb version into require js sample -->
		<copy tofile="${demo.dir}/requirejs/scripts/jsplumb.js" file="${output.js.dir}/jquery.jsPlumb-${final.version}-all.js"/>		

		<echo>Processing demo code...</echo>
		<copy todir="${output.demo.dir}">
			<fileset dir="${demo.dir}"/>
		</copy>
		<!-- copy built JS -->
		<copy todir="${output.demo.js.dir}">
			<fileset dir="${output.js.dir}"/>
		</copy>
		<!-- replace dev JS imports with final versions -->
		<antcall target="html">
			<param name="libraryDir" value="jquery"/>
			<param name="library" value="jquery"/>			
			<param name="dependencies" value="&lt;script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/jquery-ui.min.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='../js/jquery.ui.touch-punch.min.js'&gt;&lt;/script&gt;"/>
		</antcall>

		<antcall target="html">			
			<param name="libraryDir" value="mootools"/>
			<param name="library" value="mootools"/>
			<param name="dependencies" value="&lt;script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/mootools/1.3.2/mootools-yui-compressed.js'&gt;&lt;/script&gt;"/>
		</antcall>

		<antcall target="html">
			<param name="libraryDir" value="yui3"/>
			<param name="library" value="yui"/>
		</antcall>
	</target>
	

	<!-- writes the final version of JS into the copies of test html, files replacing the dev imports -->
	<target name="update-tests-js">
		<replaceregexp>						
			<regexp pattern="(&lt;!-- JS.*&gt;.*\n)(.*\n)*(.*/JS --&gt;)"/>
			<substitution expression="&lt;script type='text/javascript' src='../js/${library}.jsPlumb-${final.version}-all-min.js'&gt;&lt;/script&gt;"/>
			<fileset dir="${output.tests.dir}">
				<include name="*${library}.html"/>
				<include name="*${library}-instance.html"/>
				<include name="loadTestHarness.html"/>
			</fileset>
		</replaceregexp>				

	</target>

	<!-- copies the tests directory into the build dir -->
	<target name="copy-tests">
		<copy todir="${output.js.dir}">
			<fileset dir="src">
				<include name="jsPlumb-tests.js"/>
			</fileset>
		</copy>
		<copy todir="${output.tests.dir}">
			<fileset dir="tests">
				<include name="*.html"/>
				<include name="*.css"/>
				<include name="*.js"/>
			</fileset>
		</copy>
		<mkdir dir="${output.js.dir}/lib"/>
		<copy todir="${output.js.dir}/lib">
			<fileset dir="lib">
				<include name="qunit.js"/>
			</fileset>
		</copy>
		<!-- now replace the JS with minified ones! -->
		<antcall target="update-tests-js">
			<param name="library" value="jquery"/>
		</antcall>
		<antcall target="update-tests-js">
			<param name="library" value="mootools"/>
		</antcall>
		<antcall target="update-tests-js">
			<param name="library" value="yui"/>
		</antcall>
		
	</target>

	<!-- copies the lib directory to build -->
	<target name="copy-lib">
		<mkdir dir="${output.dir}/lib"/>
		<copy todir="${output.dir}/lib">
			<fileset dir="lib">
				<include name="*.*"/>
			</fileset>
		</copy>			
	</target>

	<!-- copies the font directory to build -->
	<target name="copy-font">
		<mkdir dir="${output.dir}/font"/>
		<copy todir="${output.dir}/font">
			<fileset dir="demo/font">
				<include name="*.*"/>
			</fileset>
		</copy>			
	</target>
	
	<target name="doc-version" unless="final.version">
		<fail message="You must supply the final version to build api docs from"/>
	</target>
	<!-- generates the API docs -->
	<target name="docs" depends="doc-version">
		<mkdir dir="TEMP"/>
		<mkdir dir="TEMPOUT"/>
		<copy todir="TEMP">
            <fileset dir="src">
				<include name="jsPlumb-apidoc.js"/>
			</fileset>
		</copy>
		<mkdir dir="apidocs"/>
	    <exec executable="naturaldocs">
	        <arg line="-i"/>
	        <arg path="TEMP"/>
	        <arg line="-o"/>
	    	<arg line="HTML"/>
	    	<arg line="TEMPOUT"/>
	    	<arg line="-p"/>
	    	<arg line="."/>
	    </exec>

	    <!-- replace the jquery.blah title stuff that apidocs comes up with -->

	    <!-- TODO this will have also changed -->

	    <replace dir="TEMPOUT" token="&lt;wbr&gt;"/>
	    <replace dir="TEMPOUT" token="jsPlumb-apidoc-js.html" value="jsPlumb-${final.version}-apidoc.html"/>

        <!-- rename apidoc main file -->
        <move file="TEMPOUT/files/jsPlumb-apidoc-js.html" tofile="TEMPOUT/files/jsPlumb-${final.version}-apidoc.html"/>      

	    <!-- write the index file -->
	    <echo file="TEMPOUT/index.html" append="false">&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Refresh" CONTENT="0; URL=./files/jsPlumb-${final.version}-apidoc.html"&gt;&lt;/head&gt;&lt;/html&gt;</echo>

	    <delete dir="Data"/>
		<delete dir="TEMP"/>
		<delete>
			<fileset dir="apidocs">
				<include name="**/*.html"/>
			</fileset>
		</delete>
		<mkdir dir="apidocs"/>
		<copy todir="apidocs">
			<fileset dir="TEMPOUT">
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="build/apidocs">
			<fileset dir="apidocs">
				<include name="**/*"/>
			</fileset>
		</copy>
		<delete dir="TEMPOUT"/>
	</target>
	
	<!-- builds a version of jsplumb -->
	<target name="build" depends="init">		
		<antcall target="minAll"/>		
		<antcall target="demo"/>		
		<antcall target="copy-tests"/>
		<antcall target="copy-lib"/>
		<antcall target="copy-font"/>
	</target>

	<!-- builds a version of jsplumb and generates apidocs -->
	<target name="build-all" depends="build">
		<antcall target="docs"/>
	</target>

	<target name="new" unless="new">
		<fail message="You must supply the new version, eg: ant -Dnew=1.4.1"/>
	</target>
	<target name="old" unless="old">
		<fail message="You must supply the old version, eg: ant -Dold=0.6"/>
	</target>
	<!-- creates/copies all the files needed for a new version -->
	<target name="newversion" depends="old,new">

		<propertyregex property="new.escaped"
              input="${new}"
              regexp="\."
              replace="\\."/>

        <propertyregex property="old.escaped"
              input="${old}"
              regexp="\."
              replace="\\\."/>

        <echo>${new.escaped}</echo>				
		
		<!-- replace refs to old version in demo html to new version -->
		<replace dir="demo/jquery" token="${old}" value="${new}"/>
		<replace dir="demo/yui3" token="${old}" value="${new}"/>
		<replace dir="demo/mootools" token="${old}" value="${new}"/>
		
		<!-- replace version number in code -->
		<replace dir="src" token="${old}" value="${new}"/>		

	</target>

	<target name="upgrade-jsbezier" depends="old,new">
		<!-- replace refs to old version in demo html to new version -->
		<replace dir="demo/jquery" token="jsBezier-${old}.js" value="jsBezier-${new}.js"/>
		<replace dir="demo/yui3" token="jsBezier-${old}.js" value="jsBezier-${new}.js"/>
		<replace dir="demo/mootools" token="jsBezier-${old}.js" value="jsBezier-${new}.js"/>
	</target>
	
</project>
